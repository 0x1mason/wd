0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/Cellar/node/0.8.15/bin/node',
1 verbose cli   '/usr/local/bin/npm',
1 verbose cli   'publish',
1 verbose cli   '--force' ]
2 info using npm@1.1.66
3 info using node@v0.8.15
4 verbose publish [ '.' ]
5 verbose read json /Users/seb/Documents/Work/wd/package.json
6 verbose cache add [ '.', null ]
7 silly cache add name=undefined spec="." args=[".",null]
8 verbose parsed url { pathname: '.', path: '.', href: '.' }
9 silly lockFile 3a52ce78- .
10 verbose lock . /Users/seb/.npm/3a52ce78-.lock
11 verbose read json package.json
12 verbose tar pack [ '/var/folders/p9/_k0hwq714n9_5fcvgzyrdb100000gn/T/npm-19512/1358407943295-0.6601832776796073/tmp.tgz',
12 verbose tar pack   '.' ]
13 verbose tarball /var/folders/p9/_k0hwq714n9_5fcvgzyrdb100000gn/T/npm-19512/1358407943295-0.6601832776796073/tmp.tgz
14 verbose folder .
15 info prepublish wd@0.0.28
16 silly lockFile b2ce8e02-43295-0-6601832776796073-tmp-tgz /var/folders/p9/_k0hwq714n9_5fcvgzyrdb100000gn/T/npm-19512/1358407943295-0.6601832776796073/tmp.tgz
17 verbose lock /var/folders/p9/_k0hwq714n9_5fcvgzyrdb100000gn/T/npm-19512/1358407943295-0.6601832776796073/tmp.tgz /Users/seb/.npm/b2ce8e02-43295-0-6601832776796073-tmp-tgz.lock
18 silly lockFile b2ce8e02-43295-0-6601832776796073-tmp-tgz /var/folders/p9/_k0hwq714n9_5fcvgzyrdb100000gn/T/npm-19512/1358407943295-0.6601832776796073/tmp.tgz
19 verbose tar unpack /var/folders/p9/_k0hwq714n9_5fcvgzyrdb100000gn/T/npm-19512/1358407943295-0.6601832776796073/tmp.tgz
20 silly lockFile 6d83a59a-43295-0-6601832776796073-package /var/folders/p9/_k0hwq714n9_5fcvgzyrdb100000gn/T/npm-19512/1358407943295-0.6601832776796073/package
21 verbose lock /var/folders/p9/_k0hwq714n9_5fcvgzyrdb100000gn/T/npm-19512/1358407943295-0.6601832776796073/package /Users/seb/.npm/6d83a59a-43295-0-6601832776796073-package.lock
22 silly gunzTarPerm modes [ '755', '644' ]
23 silly gunzTarPerm extractEntry package.json
24 silly gunzTarPerm extractEntry .npmignore
25 silly gunzTarPerm extractEntry README.md
26 silly gunzTarPerm extractEntry doc/mapping-builder.js
27 silly gunzTarPerm extractEntry doc/jsonwire-full-mapping.md
28 silly gunzTarPerm extractEntry doc/jsonwire-full.json
29 silly gunzTarPerm extractEntry doc/jsonwire-mapping.md
30 silly gunzTarPerm extractEntry doc/mapping-template.htm
31 silly gunzTarPerm extractEntry doc/supported-methods-old.md
32 silly gunzTarPerm extractEntry examples/example.chain.chrome.js
33 silly gunzTarPerm extractEntry examples/example.chrome.js
34 silly gunzTarPerm extractEntry examples/example.firefox.js
35 silly gunzTarPerm extractEntry examples/example.ondemand.ie.js
36 silly gunzTarPerm extractEntry examples/example.ondemand.js
37 silly gunzTarPerm extractEntry lib/bin.js
38 silly gunzTarPerm extractEntry lib/element.js
39 silly gunzTarPerm extractEntry lib/jsonwire-errors.js
40 silly gunzTarPerm extractEntry lib/main.js
41 silly gunzTarPerm extractEntry lib/special-keys.js
42 silly gunzTarPerm extractEntry lib/utils.js
43 silly gunzTarPerm extractEntry lib/webdriver.js
44 silly gunzTarPerm extractEntry .travis.yml
45 silly gunzTarPerm extractEntry Makefile
46 silly gunzTarPerm extractEntry test/common/basic-test-base.js
47 silly gunzTarPerm extractEntry test/common/chain-test-base.js
48 silly gunzTarPerm extractEntry test/common/element-test-base.js
49 silly gunzTarPerm extractEntry test/common/express.js
50 silly gunzTarPerm extractEntry test/common/per-method-test-base.js
51 silly gunzTarPerm extractEntry test/common/typing-test-base.js
52 silly gunzTarPerm extractEntry test/common/wd-with-cov.js
53 silly gunzTarPerm extractEntry test/common/window-frame-test-base.js
54 silly gunzTarPerm extractEntry test/common/assets/element-test-page.html
55 silly gunzTarPerm extractEntry test/common/assets/frames/bottombanner.htm
56 silly gunzTarPerm extractEntry test/common/assets/frames/index.html
57 silly gunzTarPerm extractEntry test/common/assets/frames/menupage.htm
58 silly gunzTarPerm extractEntry test/common/assets/frames/welcomepage.htm
59 silly gunzTarPerm extractEntry test/common/assets/test-page.html
60 silly gunzTarPerm extractEntry test/common/assets/type-test-page.html
61 silly gunzTarPerm extractEntry test/common/assets/window-test-page.html
62 silly gunzTarPerm extractEntry test/ghostdriver/basic-test.js
63 silly gunzTarPerm extractEntry test/ghostdriver/config.js
64 silly gunzTarPerm extractEntry test/ghostdriver/element-test.js
65 silly gunzTarPerm extractEntry test/ghostdriver/per-method-test.js
66 silly gunzTarPerm extractEntry test/ghostdriver/typing-test.js
67 silly gunzTarPerm extractEntry test/ghostdriver/window-frame-test.js
68 silly gunzTarPerm extractEntry test/local/basic-test.js
69 silly gunzTarPerm extractEntry test/local/browser-init-test.js
70 silly gunzTarPerm extractEntry test/local/chain-test.js
71 silly gunzTarPerm extractEntry test/local/element-test.js
72 silly gunzTarPerm extractEntry test/local/per-method-test.js
73 silly gunzTarPerm extractEntry test/local/typing-test.js
74 silly gunzTarPerm extractEntry test/local/wd-remote-init-test.js
75 silly gunzTarPerm extractEntry test/local/window-frame-test.js
76 silly gunzTarPerm extractEntry test/mocha.opts
77 silly gunzTarPerm extractEntry test/saucelabs/README
78 silly gunzTarPerm extractEntry test/saucelabs/basic-test.js
79 silly gunzTarPerm extractEntry test/saucelabs/browser-init-test.js
80 silly gunzTarPerm extractEntry test/saucelabs/config-helper.js
81 silly gunzTarPerm extractEntry test/saucelabs/config.js
82 silly gunzTarPerm extractEntry test/saucelabs/config.sample.js
83 silly gunzTarPerm extractEntry test/unit/callback-test.js
84 silly gunzTarPerm extractEntry browser-scripts/safe-execute-async.js
85 silly gunzTarPerm extractEntry browser-scripts/safe-execute.js
86 silly gunzTarPerm extractEntry browser-scripts/wait-for-cond-in-browser.js
87 silly gunzTarPerm extractEntry LICENSE.APACHE2
88 verbose read json /var/folders/p9/_k0hwq714n9_5fcvgzyrdb100000gn/T/npm-19512/1358407943295-0.6601832776796073/package/package.json
89 silly lockFile 6d83a59a-43295-0-6601832776796073-package /var/folders/p9/_k0hwq714n9_5fcvgzyrdb100000gn/T/npm-19512/1358407943295-0.6601832776796073/package
90 verbose from cache /var/folders/p9/_k0hwq714n9_5fcvgzyrdb100000gn/T/npm-19512/1358407943295-0.6601832776796073/package/package.json
91 verbose tar pack [ '/Users/seb/.npm/wd/0.0.28/package.tgz',
91 verbose tar pack   '/var/folders/p9/_k0hwq714n9_5fcvgzyrdb100000gn/T/npm-19512/1358407943295-0.6601832776796073/package' ]
92 verbose tarball /Users/seb/.npm/wd/0.0.28/package.tgz
93 verbose folder /var/folders/p9/_k0hwq714n9_5fcvgzyrdb100000gn/T/npm-19512/1358407943295-0.6601832776796073/package
94 silly lockFile 53809ddf-rs-seb-npm-wd-0-0-28-package-tgz /Users/seb/.npm/wd/0.0.28/package.tgz
95 verbose lock /Users/seb/.npm/wd/0.0.28/package.tgz /Users/seb/.npm/53809ddf-rs-seb-npm-wd-0-0-28-package-tgz.lock
96 silly lockFile 53809ddf-rs-seb-npm-wd-0-0-28-package-tgz /Users/seb/.npm/wd/0.0.28/package.tgz
97 silly lockFile 338199e0-Users-seb-npm-wd-0-0-28-package /Users/seb/.npm/wd/0.0.28/package
98 verbose lock /Users/seb/.npm/wd/0.0.28/package /Users/seb/.npm/338199e0-Users-seb-npm-wd-0-0-28-package.lock
99 silly lockFile 338199e0-Users-seb-npm-wd-0-0-28-package /Users/seb/.npm/wd/0.0.28/package
100 verbose tar unpack /Users/seb/.npm/wd/0.0.28/package.tgz
101 silly lockFile 338199e0-Users-seb-npm-wd-0-0-28-package /Users/seb/.npm/wd/0.0.28/package
102 verbose lock /Users/seb/.npm/wd/0.0.28/package /Users/seb/.npm/338199e0-Users-seb-npm-wd-0-0-28-package.lock
103 silly gunzTarPerm modes [ '755', '644' ]
104 silly gunzTarPerm extractEntry package.json
105 silly gunzTarPerm extractEntry .npmignore
106 silly gunzTarPerm extractEntry README.md
107 silly gunzTarPerm extractEntry doc/mapping-builder.js
108 silly gunzTarPerm extractEntry doc/jsonwire-full-mapping.md
109 silly gunzTarPerm extractEntry doc/jsonwire-full.json
110 silly gunzTarPerm extractEntry doc/jsonwire-mapping.md
111 silly gunzTarPerm extractEntry doc/mapping-template.htm
112 silly gunzTarPerm extractEntry doc/supported-methods-old.md
113 silly gunzTarPerm extractEntry examples/example.chain.chrome.js
114 silly gunzTarPerm extractEntry examples/example.chrome.js
115 silly gunzTarPerm extractEntry examples/example.firefox.js
116 silly gunzTarPerm extractEntry examples/example.ondemand.ie.js
117 silly gunzTarPerm extractEntry examples/example.ondemand.js
118 silly gunzTarPerm extractEntry .travis.yml
119 silly gunzTarPerm extractEntry LICENSE.APACHE2
120 silly gunzTarPerm extractEntry Makefile
121 silly gunzTarPerm extractEntry test/common/basic-test-base.js
122 silly gunzTarPerm extractEntry test/common/chain-test-base.js
123 silly gunzTarPerm extractEntry test/common/element-test-base.js
124 silly gunzTarPerm extractEntry test/common/express.js
125 silly gunzTarPerm extractEntry test/common/per-method-test-base.js
126 silly gunzTarPerm extractEntry test/common/typing-test-base.js
127 silly gunzTarPerm extractEntry test/common/wd-with-cov.js
128 silly gunzTarPerm extractEntry test/common/window-frame-test-base.js
129 silly gunzTarPerm extractEntry test/common/assets/element-test-page.html
130 silly gunzTarPerm extractEntry test/common/assets/frames/bottombanner.htm
131 silly gunzTarPerm extractEntry test/common/assets/frames/index.html
132 silly gunzTarPerm extractEntry test/common/assets/frames/menupage.htm
133 silly gunzTarPerm extractEntry test/common/assets/frames/welcomepage.htm
134 silly gunzTarPerm extractEntry test/common/assets/test-page.html
135 silly gunzTarPerm extractEntry test/common/assets/type-test-page.html
136 silly gunzTarPerm extractEntry test/common/assets/window-test-page.html
137 silly gunzTarPerm extractEntry test/ghostdriver/basic-test.js
138 silly gunzTarPerm extractEntry test/ghostdriver/config.js
139 silly gunzTarPerm extractEntry test/ghostdriver/element-test.js
140 silly gunzTarPerm extractEntry test/ghostdriver/per-method-test.js
141 silly gunzTarPerm extractEntry test/ghostdriver/typing-test.js
142 silly gunzTarPerm extractEntry test/ghostdriver/window-frame-test.js
143 silly gunzTarPerm extractEntry test/local/basic-test.js
144 silly gunzTarPerm extractEntry test/local/browser-init-test.js
145 silly gunzTarPerm extractEntry test/local/chain-test.js
146 silly gunzTarPerm extractEntry test/local/element-test.js
147 silly gunzTarPerm extractEntry test/local/per-method-test.js
148 silly gunzTarPerm extractEntry test/local/typing-test.js
149 silly gunzTarPerm extractEntry test/local/wd-remote-init-test.js
150 silly gunzTarPerm extractEntry test/local/window-frame-test.js
151 silly gunzTarPerm extractEntry test/mocha.opts
152 silly gunzTarPerm extractEntry test/saucelabs/README
153 silly gunzTarPerm extractEntry test/saucelabs/basic-test.js
154 silly gunzTarPerm extractEntry test/saucelabs/browser-init-test.js
155 silly gunzTarPerm extractEntry test/saucelabs/config-helper.js
156 silly gunzTarPerm extractEntry test/saucelabs/config.js
157 silly gunzTarPerm extractEntry test/saucelabs/config.sample.js
158 silly gunzTarPerm extractEntry test/unit/callback-test.js
159 silly gunzTarPerm extractEntry browser-scripts/safe-execute-async.js
160 silly gunzTarPerm extractEntry browser-scripts/safe-execute.js
161 silly gunzTarPerm extractEntry browser-scripts/wait-for-cond-in-browser.js
162 silly gunzTarPerm extractEntry lib/bin.js
163 silly gunzTarPerm extractEntry lib/element.js
164 silly gunzTarPerm extractEntry lib/jsonwire-errors.js
165 silly gunzTarPerm extractEntry lib/main.js
166 silly gunzTarPerm extractEntry lib/special-keys.js
167 silly gunzTarPerm extractEntry lib/utils.js
168 silly gunzTarPerm extractEntry lib/webdriver.js
169 verbose read json /Users/seb/.npm/wd/0.0.28/package/package.json
170 silly lockFile 338199e0-Users-seb-npm-wd-0-0-28-package /Users/seb/.npm/wd/0.0.28/package
171 silly shasum updated bytes 40960
172 silly shasum updated bytes 7897
173 info shasum 56c5851c38b90b8a37ec1d372e310f67227a805b
173 info shasum /Users/seb/.npm/wd/0.0.28/package.tgz
174 verbose from cache /Users/seb/.npm/wd/0.0.28/package/package.json
175 verbose chmod /Users/seb/.npm/wd/0.0.28/package.tgz 644
176 verbose chown /Users/seb/.npm/wd/0.0.28/package.tgz [ 501, 20 ]
177 silly lockFile 3a52ce78- .
178 silly publish { name: 'wd',
178 silly publish   description: 'WebDriver/Selenium 2 node.js client',
178 silly publish   tags: [ 'web', 'automation', 'browser', 'javascript' ],
178 silly publish   version: '0.0.28',
178 silly publish   author: { name: 'Adam Christian', email: 'adam.christian@gmail.com' },
178 silly publish   repository: { type: 'git', url: 'https://github.com/admc/wd.git' },
178 silly publish   bugs: { url: 'https://github.com/admc/wd/issues' },
178 silly publish   engines: [ 'node' ],
178 silly publish   main: './lib/main',
178 silly publish   bin: { wd: './lib/bin.js' },
178 silly publish   directories: { lib: './lib' },
178 silly publish   dependencies:
178 silly publish    { async: '0.1.x',
178 silly publish      underscore: '1.4.x',
178 silly publish      vargs: '~0.1.0',
178 silly publish      request: '~2.12.0' },
178 silly publish   devDependencies:
178 silly publish    { mocha: '1.6.x',
178 silly publish      should: '1.2.x',
178 silly publish      'coffee-script': '1.3.x',
178 silly publish      express: '3.x',
178 silly publish      imageinfo: '1.0.x',
178 silly publish      covershot: '0.1.x',
178 silly publish      nock: '0.13.x',
178 silly publish      dox: '0.3.x',
178 silly publish      mu2: '0.5.x',
178 silly publish      'sv-selenium': '0.1.x' },
178 silly publish   scripts: { test: 'make test_saucelabs' },
178 silly publish   readme: '# WD.js -- WebDriver/Selenium 2 for node.js\n\n[![Build Status](https://secure.travis-ci.org/admc/wd.png?branch=master)](http://travis-ci.org/admc/wd)\n[![Selenium Test Status](https://saucelabs.com/buildstatus/wdjs)](https://saucelabs.com/u/wdjs)\n\n## Update node to latest\n\nhttp://nodejs.org/#download\n\n## Install\n\n<pre>\nnpm install wd\n</pre>\n\n## Authors\n\n  - Adam Christian ([admc](http://github.com/admc))\n  - Ruben Daniels ([javruben](https://github.com/javruben))\n  - Peter Braden ([peterbraden](https://github.com/peterbraden))\n  - Seb Vincent ([sebv](https://github.com/sebv))\n  - Peter \'Pita\' Martischka ([pita](https://github.com/Pita))\n  - Jonathan Lipps ([jlipps](https://github.com/jlipps))\n  - Phil Sarin ([pdsarin](https://github.com/pdsarin))\n  - Mathieu Sabourin ([OniOni](https://github.com/OniOni))\n  - Bjorn Tipling ([btipling](https://github.com/btipling))\n  - Santiago Suarez Ordonez ([santiycr](https://github.com/santiycr))\n  \n## License\n\n  * License - Apache 2: http://www.apache.org/licenses/LICENSE-2.0\n\n## Usage\n\n<pre>\n): wd shell\n> x = wd.remote() or wd.remote("ondemand.saucelabs.com", 80, "username", "apikey")\n\n> x.init() or x.init({desired capabilities ovveride})\n> x.get("http://www.url.com")\n> x.eval("window.location.href", function(e, o) { console.log(o) })\n> x.quit()\n</pre>\n\n\n## Writing a test!\n\n<pre>\nvar webdriver = require(\'wd\')\n  , assert = require(\'assert\');\n\nvar browser = webdriver.remote();\n\nbrowser.on(\'status\', function(info){\n  console.log(\'\\x1b[36m%s\\x1b[0m\', info);\n});\nbrowser.on(\'command\', function(meth, path){\n  console.log(\' > \\x1b[33m%s\\x1b[0m: %s\', meth, path);\n});\n\ndesired = {\n  browserName:\'chrome\'\n  , tags: ["examples"]\n  , name: "This is an example test"\n};\n\nbrowser.init(desired, function() {\n  browser.get("http://admc.io/wd/test-pages/guinea-pig.html", function() {\n    browser.title(function(err, title) {\n      assert.ok(~title.indexOf(\'I am a page title - Sauce Labs\'), \'Wrong title!\');\n      browser.elementById(\'i am a link\', function(err, el) {\n        browser.clickElement(el, function() {\n          browser.eval("window.location.href", function(err, location) {\n            assert.ok(~location.indexOf(\'guinea-pig2\'));\n            browser.quit();\n          });\n        });\n      });\n    });\n  });\n});\n</pre>\n\n## Supported Methods\n\n<table class="wikitable">\n  <tbody>\n    <tr>\n      <td width="50%" style="border: 1px solid #ccc; padding: 5px;">\n        <strong>JsonWireProtocol</strong>\n      </td>\n      <td width="50%" style="border: 1px solid #ccc; padding: 5px;">\n        <strong>wd</strong>\n      </td>\n    </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            GET <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/status">/status</a><br>\n            Query the server\'s current status.\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              status(cb) -&gt; cb(err, status)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            POST <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session">/session</a><br>\n            Create a new session.\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              init(desired, cb) -&gt; cb(err, sessionID)<br>\n            \n              Initialize the browser.<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            GET <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/sessions">/sessions</a><br>\n            Returns a list of the currently active sessions.\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n          \n            <p>\n              \n                sessions(cb) -&gt; cb(err, sessions)<br>\n              \n            </p>\n          \n            <p>\n              \n                Alternate strategy to get session capabilities from server session list: <br>\n              \n                altSessionCapabilities(cb) -&gt; cb(err, capabilities)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            GET <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId">/session/:sessionId</a><br>\n            Retrieve the capabilities of the specified session.\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              sessionCapabilities(cb) -&gt; cb(err, capabilities)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            DELETE <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId">/session/:sessionId</a><br>\n            Delete the session.\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              quit(cb) -&gt; cb(err)<br>\n            \n              Destroy the browser.<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            POST <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts">/session/:sessionId/timeouts</a><br>\n            Configure the amount of time that a particular type of operation can execute for before they are aborted and a |Timeout| error is returned to the client.\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              setPageLoadTimeout(ms, cb) -&gt; cb(err)<br>\n            \n              (use setImplicitWaitTimeout and setAsyncScriptTimeout to set the other timeouts)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            POST <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/async_script">/session/:sessionId/timeouts/async_script</a><br>\n            Set the amount of time, in milliseconds, that asynchronous scripts executed by /session/:sessionId/execute_async are permitted to run before they are aborted and a |Timeout| error is returned to the client.\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              setAsyncScriptTimeout(ms, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            POST <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/implicit_wait">/session/:sessionId/timeouts/implicit_wait</a><br>\n            Set the amount of time the driver should wait when searching for elements.\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              setImplicitWaitTimeout(ms, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            GET <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window_handle">/session/:sessionId/window_handle</a><br>\n            Retrieve the current window handle.\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              windowHandle(cb) -&gt; cb(err, handle)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            GET <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window_handles">/session/:sessionId/window_handles</a><br>\n            Retrieve the list of all window handles available to the session.\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              windowHandles(cb) -&gt; cb(err, arrayOfHandles)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            GET <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/url">/session/:sessionId/url</a><br>\n            Retrieve the URL of the current page.\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              url(cb) -&gt; cb(err, url)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            POST <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/url">/session/:sessionId/url</a><br>\n            Navigate to a new URL.\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              get(url,cb) -&gt; cb(err)<br>\n            \n              Get a new url.<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            POST <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/forward">/session/:sessionId/forward</a><br>\n            Navigate forwards in the browser history, if possible.\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              forward(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            POST <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/back">/session/:sessionId/back</a><br>\n            Navigate backwards in the browser history, if possible.\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              back(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            POST <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/refresh">/session/:sessionId/refresh</a><br>\n            Refresh the current page.\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              refresh(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            POST <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute">/session/:sessionId/execute</a><br>\n            Inject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n          \n            <p>\n              \n                execute(code, args, cb) -&gt; cb(err, result)<br>\n              \n                execute(code, cb) -&gt; cb(err, result)<br>\n              \n                args: script argument array (optional)<br>\n              \n                 <br>\n              \n            </p>\n          \n            <p>\n              \n                Execute script using eval(code): <br>\n              \n                safeExecute(code, args, cb) -&gt; cb(err, result)<br>\n              \n                safeExecute(code, cb) -&gt; cb(err, result)<br>\n              \n                args: script argument array (optional)<br>\n              \n                 <br>\n              \n            </p>\n          \n            <p>\n              \n                Evaluate expression (using execute): <br>\n              \n                eval(code, cb) -&gt; cb(err, value)<br>\n              \n            </p>\n          \n            <p>\n              \n                Evaluate expression (using safeExecute): <br>\n              \n                safeEval(code, cb) -&gt; cb(err, value)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            POST <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute_async">/session/:sessionId/execute_async</a><br>\n            Inject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n          \n            <p>\n              \n                executeAsync(code, args, cb) -&gt; cb(err, result)<br>\n              \n                executeAsync(code, cb) -&gt; cb(err, result)<br>\n              \n                args: script argument array (optional)<br>\n              \n                 <br>\n              \n            </p>\n          \n            <p>\n              \n                Execute async script using eval(code): <br>\n              \n                safeExecuteAsync(code, args, cb) -&gt; cb(err, result)<br>\n              \n                safeExecuteAsync(code, cb) -&gt; cb(err, result)<br>\n              \n                args: script argument array (optional)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            GET <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/screenshot">/session/:sessionId/screenshot</a><br>\n            Take a screenshot of the current page.\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              takeScreenshot(cb) -&gt; cb(err, screenshot)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            POST <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/frame">/session/:sessionId/frame</a><br>\n            Change focus to another frame on the page.\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              frame(frameRef, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            POST <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window">/session/:sessionId/window</a><br>\n            Change focus to another window.\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              window(name, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            DELETE <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/window">/session/:sessionId/window</a><br>\n            Close the current window.\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              close(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            GET <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/cookie">/session/:sessionId/cookie</a><br>\n            Retrieve all cookies visible to the current page.\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              allCookies() -&gt; cb(err, cookies)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            POST <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/cookie">/session/:sessionId/cookie</a><br>\n            Set a cookie.\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              setCookie(cookie, cb) -&gt; cb(err)<br>\n            \n              cookie example:  <br>\n            \n               {name:\'fruit\', value:\'apple\'}<br>\n            \n              Optional cookie fields: <br>\n            \n               path, domain, secure, expiry<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            DELETE <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie">/session/:sessionId/cookie</a><br>\n            Delete all cookies visible to the current page.\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              deleteAllCookies(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            DELETE <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie/:name">/session/:sessionId/cookie/:name</a><br>\n            Delete the cookie with the given name.\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              deleteCookie(name, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            GET <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/title">/session/:sessionId/title</a><br>\n            Get the current page title.\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              title(cb) -&gt; cb(err, title)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            POST <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element">/session/:sessionId/element</a><br>\n            Search for an element on the page, starting from the document root.\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n          \n            <p>\n              \n                element(using, value, cb) -&gt; cb(err, element)<br>\n              \n            </p>\n          \n            <p>\n              \n                elementByClassName(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByCssSelector(value, cb) -&gt; cb(err, element)<br>\n              \n                elementById(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByName(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByLinkText(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByPartialLinkText(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByTagName(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByXPath(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByCss(value, cb) -&gt; cb(err, element)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            POST <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/elements">/session/:sessionId/elements</a><br>\n            Search for multiple elements on the page, starting from the document root.\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n          \n            <p>\n              \n                elements(using, value, cb) -&gt; cb(err, elements)<br>\n              \n            </p>\n          \n            <p>\n              \n                elementsByClassName(value, cb) -&gt; cb(err, elements)      <br>\n              \n                elementsByCssSelector(value, cb) -&gt; cb(err, elements)      <br>\n              \n                elementsById(value, cb) -&gt; cb(err, elements)      <br>\n              \n                elementsByName(value, cb) -&gt; cb(err, elements)      <br>\n              \n                elementsByLinkText(value, cb) -&gt; cb(err, elements)      <br>\n              \n                elementsByPartialLinkText(value, cb) -&gt; cb(err, elements)      <br>\n              \n                elementsByTagName(value, cb) -&gt; cb(err, elements)      <br>\n              \n                elementsByXPath(value, cb) -&gt; cb(err, elements)      <br>\n              \n                elementsByCss(value, cb) -&gt; cb(err, elements)      <br>\n              \n            </p>\n          \n            <p>\n              \n                Retrieve an element avoiding not found exception and returning null instead: <br>\n              \n                elementOrNull(using, value, cb) -&gt; cb(err, element)<br>\n              \n            </p>\n          \n            <p>\n              \n                elementByClassNameOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByCssSelectorOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByIdOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByNameOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByLinkTextOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByPartialLinkTextOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByTagNameOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByXPathOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByCssOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n            </p>\n          \n            <p>\n              \n                Retrieve an element avoiding not found exception and returning undefined instead: <br>\n              \n                elementIfExists(using, value, cb) -&gt; cb(err, element)<br>\n              \n            </p>\n          \n            <p>\n              \n                elementByClassNameIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByCssSelectorIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByIdIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByNameIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByLinkTextIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByPartialLinkTextIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByTagNameIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByXPathIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByCssIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n            </p>\n          \n            <p>\n              \n                Check if element exists: <br>\n              \n                hasElement(using, value, cb) -&gt; cb(err, boolean)<br>\n              \n            </p>\n          \n            <p>\n              \n                hasElementByClassName(value, cb) -&gt; cb(err, boolean) <br>\n              \n                hasElementByCssSelector(value, cb) -&gt; cb(err, boolean) <br>\n              \n                hasElementById(value, cb) -&gt; cb(err, boolean) <br>\n              \n                hasElementByName(value, cb) -&gt; cb(err, boolean) <br>\n              \n                hasElementByLinkText(value, cb) -&gt; cb(err, boolean) <br>\n              \n                hasElementByPartialLinkText(value, cb) -&gt; cb(err, boolean) <br>\n              \n                hasElementByTagName(value, cb) -&gt; cb(err, boolean) <br>\n              \n                hasElementByXPath(value, cb) -&gt; cb(err, boolean) <br>\n              \n                hasElementByCss(value, cb) -&gt; cb(err, boolean) <br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            POST <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/active">/session/:sessionId/element/active</a><br>\n            Get the element on the page that currently has focus.\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              active(cb) -&gt; cb(err, element)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            POST <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/click">/session/:sessionId/element/:id/click</a><br>\n            Click on an element.\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n          \n            <p>\n              \n                clickElement(element, cb) -&gt; cb(err)<br>\n              \n            </p>\n          \n            <p>\n              \n                element.click(cb) -&gt; cb(err)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            GET <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/text">/session/:sessionId/element/:id/text</a><br>\n            Returns the visible text for the element.\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n          \n            <p>\n              \n                text(element, cb) -&gt; cb(err, text)<br>\n              \n                element: specific element, \'body\', or undefined<br>\n              \n            </p>\n          \n            <p>\n              \n                element.text(cb) -&gt; cb(err, text)<br>\n              \n            </p>\n          \n            <p>\n              \n                Check if text is present: <br>\n              \n                textPresent(searchText, element, cb) -&gt; cb(err, boolean)<br>\n              \n                element: specific element, \'body\', or undefined<br>\n              \n                 <br>\n              \n            </p>\n          \n            <p>\n              \n                element.textPresent(searchText, cb) -&gt; cb(err, boolean)<br>\n              \n                 <br>\n              \n            </p>\n          \n        </td>\n      </tr>\n\n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            POST <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/location">/session/:sessionId/element/:id/location</a><br>\n            Get an element\'s location on the page\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            <p>\n              \n                location(element, cb) -&gt; cb(err, location)<br>\n              \n            </p>\n          \n            <p>\n              \n                element.location(cb) -&gt; cb(err, location)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            POST <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/value">/session/:sessionId/element/:id/value</a><br>\n            Send a sequence of key strokes to an element.\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n          \n            <p>\n              \n                type(element, keys, cb) -&gt; cb(err)<br>\n              \n                Type keys (all keys are up at the end of command).<br>\n              \n                special key map: wd.SPECIAL_KEYS (see lib/special-keys.js)<br>\n              \n            </p>\n          \n            <p>\n              \n                element.type(keys, cb) -&gt; cb(err)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            POST <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/keys">/session/:sessionId/keys</a><br>\n            Send a sequence of key strokes to the active element.\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              keys(keys, cb) -&gt; cb(err)<br>\n            \n              Press keys (keys may still be down at the end of command).<br>\n            \n              special key map: wd.SPECIAL_KEYS (see lib/special-keys.js)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            GET <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/name">/session/:sessionId/element/:id/name</a><br>\n            Query for an element\'s tag name.\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n          \n            <p>\n              \n                getTagName(element, cb) -&gt; cb(err, name)<br>\n              \n            </p>\n          \n            <p>\n              \n                element.getTagName(cb) -&gt; cb(err, name)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            POST <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/clear">/session/:sessionId/element/:id/clear</a><br>\n            Clear a TEXTAREA or text INPUT element\'s value.\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n          \n            <p>\n              \n                clear(element, cb) -&gt; cb(err)<br>\n              \n            </p>\n          \n            <p>\n              \n                element.clear(cb) -&gt; cb(err)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            GET <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/attribute/:name">/session/:sessionId/element/:id/attribute/:name</a><br>\n            Get the value of an element\'s attribute.\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n          \n            <p>\n              \n                getAttribute(element, attrName, cb) -&gt; cb(err, value)<br>\n              \n            </p>\n          \n            <p>\n              \n                element.getAttribute(attrName, cb) -&gt; cb(err, value)<br>\n              \n            </p>\n          \n            <p>\n              \n                Get element value (in value attribute): <br>\n              \n                getValue(element, cb) -&gt; cb(err, value)<br>\n              \n            </p>\n          \n            <p>\n              \n                element.getValue(cb) -&gt; cb(err, value)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            GET <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/displayed">/session/:sessionId/element/:id/displayed</a><br>\n            Determine if an element is currently displayed.\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n          \n            <p>\n              \n                isDisplayed(element, cb) -&gt; cb(err, displayed)<br>\n              \n            </p>\n          \n            <p>\n              \n                element.isDisplayed(cb) -&gt; cb(err, displayed)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            GET <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/css/:propertyName">/session/:sessionId/element/:id/css/:propertyName</a><br>\n            Query the value of an element\'s computed CSS property.\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n          \n            <p>\n              \n                getComputedCss(element, cssProperty , cb) -&gt; cb(err, value)<br>\n              \n            </p>\n          \n            <p>\n              \n                element.getComputedCss(cssProperty , cb) -&gt; cb(err, value)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            GET <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/alert_text">/session/:sessionId/alert_text</a><br>\n            Gets the text of the currently displayed JavaScript alert(), confirm(), or prompt() dialog.\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              alertText(cb) -&gt; cb(err, text)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            POST <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/alert_text">/session/:sessionId/alert_text</a><br>\n            Sends keystrokes to a JavaScript prompt() dialog.\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              alertKeys(keys, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            POST <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/accept_alert">/session/:sessionId/accept_alert</a><br>\n            Accepts the currently displayed alert dialog.\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              acceptAlert(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            POST <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/dismiss_alert">/session/:sessionId/dismiss_alert</a><br>\n            Dismisses the currently displayed alert dialog.\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              dismissAlert(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            POST <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/moveto">/session/:sessionId/moveto</a><br>\n            Move the mouse by an offset of the specificed element.\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              moveTo(element, xoffset, yoffset, cb) -&gt; cb(err)<br>\n            \n              Move to element, xoffset and y offset are optional.<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            POST <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/click">/session/:sessionId/click</a><br>\n            Click any mouse button (at the coordinates set by the last moveto command).\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              click(button, cb) -&gt; cb(err)<br>\n            \n              Click on current element.<br>\n            \n              Buttons: {left: 0, middle: 1 , right: 2}<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            POST <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttondown">/session/:sessionId/buttondown</a><br>\n            Click and hold the left mouse button (at the coordinates set by the last moveto command).\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              buttonDown(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            POST <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttonup">/session/:sessionId/buttonup</a><br>\n            Releases the mouse button previously held (where the mouse is currently at).\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              buttonUp(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n            POST <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/doubleclick">/session/:sessionId/doubleclick</a><br>\n            Double-clicks at the current mouse coordinates (set by moveto).\n          \n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              doubleclick(cb) -&gt; cb(err) <br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              esired, cb<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              Opens a new window (using Javascript window.open):<br>\n            \n              newWindow(url, name, cb) -&gt; cb(err)<br>\n            \n              newWindow(url, cb) -&gt; cb(err)<br>\n            \n              name: optional window name<br>\n            \n              Window can later be accessed by name with the window method, <br>\n            \n              or by getting the last handle returned by the windowHandles method.<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              rl, name, cb<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              windowName(cb) -&gt; cb(err, name)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              waitForElement(using, value, timeout, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              waitForVisible(using, value, timeout, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              waitForElementByClassName(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForElementByCssSelector(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForElementById(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForElementByName(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForElementByLinkText(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForElementByPartialLinkText(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForElementByTagName(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForElementByXPath(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForElementByCss(value, timeout, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              waitForVisibleByClassName(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForVisibleByCssSelector(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForVisibleById(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForVisibleByName(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForVisibleByLinkText(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForVisibleByPartialLinkText(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForVisibleByTagName(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForVisibleByXPath(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForVisibleByCss(value, timeout, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              isVisible(element , cb) -&gt; cb(err, boolean)<br>\n            \n              isVisible(queryType, querySelector, cb) -&gt; cb(err, boolean)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              Waits for JavaScript condition to be true (polling within wd client): <br>\n            \n              waitForCondition(conditionExpr, timeout, pollFreq, cb) -&gt; cb(err, boolean)<br>\n            \n              waitForCondition(conditionExpr, timeout, cb) -&gt; cb(err, boolean)<br>\n            \n              waitForCondition(conditionExpr, cb) -&gt; cb(err, boolean)<br>\n            \n              conditionExpr: condition expression, should return a boolean<br>\n            \n              timeout: timeout (optional, default: 1000) <br>\n            \n              pollFreq: pooling frequency (optional, default: 100)<br>\n            \n              return true if condition satisfied, error otherwise.<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              Waits for JavaScript condition to be true (async script polling within browser): <br>\n            \n              waitForConditionInBrowser(conditionExpr, timeout, pollFreq, cb) -&gt; cb(err, boolean)<br>\n            \n              waitForConditionInBrowser(conditionExpr, timeout, cb) -&gt; cb(err, boolean)<br>\n            \n              waitForConditionInBrowser(conditionExpr, cb) -&gt; cb(err, boolean)<br>\n            \n              conditionExpr: condition expression, should return a boolean<br>\n            \n              timeout: timeout (optional, default: 1000) <br>\n            \n              pollFreq: pooling frequency (optional, default: 100)<br>\n            \n              return true if condition satisfied, error otherwise.<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style="border: 1px solid #ccc; padding: 5px;">\n          \n          \n            \n              isVisible(cb) -&gt; cb(err, boolean)<br>\n            \n          \n          \n        </td>\n      </tr>\n      \n  </tbody>\n</table>\n\n### Full JsonWireProtocol mapping:\n\n[supported mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-mapping.md)\n\n[full mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-full-mapping.md)\n\n\n## More docs!\n<pre>\nWD is simply implementing the Selenium JsonWireProtocol, for more details see the official docs:\n - <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol">http://code.google.com/p/selenium/wiki/JsonWireProtocol</a>\n</pre>\n\n## Run the tests!\n<pre>\n  - Run the selenium server with chromedriver: \n      java -jar selenium-server-standalone-2.21.0.jar -Dwebdriver.chrome.driver=&lt;PATH&gt;/chromedriver\n  - cd wd\n  - npm install .\n  - make test\n  - look at the results!\n</pre>\n\n## Run the tests on Sauce Labs cloud!\n<pre>\n  - cd wd\n  - npm install .\n  - make test_saucelabs\n</pre>\n\n## Test Coverage\n\n[test coverage](http://admc.io/wd/coverage.html)\n',
178 silly publish   readmeFilename: 'README.md',
178 silly publish   _id: 'wd@0.0.28',
178 silly publish   dist: { shasum: '56c5851c38b90b8a37ec1d372e310f67227a805b' } }
179 verbose url raw wd
180 verbose url resolving [ 'https://registry.npmjs.org/', './wd' ]
181 verbose url resolved https://registry.npmjs.org/wd
182 info trying registry request attempt 1 at 15:32:24
183 http PUT https://registry.npmjs.org/wd
184 http 409 https://registry.npmjs.org/wd
185 verbose url raw wd
186 verbose url resolving [ 'https://registry.npmjs.org/', './wd' ]
187 verbose url resolved https://registry.npmjs.org/wd
188 info trying registry request attempt 1 at 15:32:28
189 http GET https://registry.npmjs.org/wd
190 http 200 https://registry.npmjs.org/wd
191 verbose url raw wd/0.0.28/-tag/latest
192 verbose url resolving [ 'https://registry.npmjs.org/', './wd/0.0.28/-tag/latest' ]
193 verbose url resolved https://registry.npmjs.org/wd/0.0.28/-tag/latest
194 info trying registry request attempt 1 at 15:32:30
195 http PUT https://registry.npmjs.org/wd/0.0.28/-tag/latest
196 http 403 https://registry.npmjs.org/wd/0.0.28/-tag/latest
197 error publish Error sending version data
198 error Error: forbidden user: sebv not authorized to modify wd
198 error Changed: dist-tags.latest "0.0.27" -> "0.0.28"
198 error Added: versions.0.0.28
198 error Changed: time.modified "2012-12-10T23:40:05.844Z" -> "2013-01-17T07:31:02.945Z"
198 error Added: time.0.0.28: wd/0.0.28/-tag/latest
198 error     at RegClient.<anonymous> (/usr/local/Cellar/node/0.8.15/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:259:14)
198 error     at Request.init.self.callback (/usr/local/Cellar/node/0.8.15/lib/node_modules/npm/node_modules/request/main.js:120:22)
198 error     at Request.EventEmitter.emit (events.js:99:17)
198 error     at Request.<anonymous> (/usr/local/Cellar/node/0.8.15/lib/node_modules/npm/node_modules/request/main.js:648:16)
198 error     at Request.EventEmitter.emit (events.js:126:20)
198 error     at IncomingMessage.Request.start.self.req.self.httpModule.request.buffer (/usr/local/Cellar/node/0.8.15/lib/node_modules/npm/node_modules/request/main.js:610:14)
198 error     at IncomingMessage.EventEmitter.emit (events.js:126:20)
198 error     at IncomingMessage._emitEnd (http.js:366:10)
198 error     at HTTPParser.parserOnMessageComplete [as onMessageComplete] (http.js:149:23)
198 error     at CleartextStream.socketOnData [as ondata] (http.js:1367:20)
199 error If you need help, you may report this log at:
199 error     <http://github.com/isaacs/npm/issues>
199 error or email it to:
199 error     <npm-@googlegroups.com>
200 error System Darwin 12.2.0
201 error command "/usr/local/Cellar/node/0.8.15/bin/node" "/usr/local/bin/npm" "publish" "--force"
202 error cwd /Users/seb/Documents/Work/wd
203 error node -v v0.8.15
204 error npm -v 1.1.66
205 verbose exit [ 1, true ]
