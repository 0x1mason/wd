{"name":"WD.js","tagline":"node.js webdriver/selenium 2 client","body":"# WD.js -- WebDriver/Selenium 2 for node.js\r\n  - Mailing List: https://groups.google.com/forum/#!forum/wdjs\r\n\r\n## Status\r\n\r\n[![Build Status](https://secure.travis-ci.org/admc/wd.png?branch=master)](http://travis-ci.org/admc/wd)\r\n[![Selenium Test Status](https://saucelabs.com/buildstatus/wdjs)](https://saucelabs.com/u/wdjs)\r\n\r\n[![Selenium Test Status](https://saucelabs.com/browser-matrix/wdjs.svg)](https://saucelabs.com/u/wdjs)\r\n\r\n## Install\r\n\r\n```\r\nnpm install wd\r\n```\r\n\r\n## Authors\r\n\r\n  - Adam Christian ([admc](http://github.com/admc))\r\n  - Ruben Daniels ([javruben](https://github.com/javruben))\r\n  - Peter Braden ([peterbraden](https://github.com/peterbraden))\r\n  - Seb Vincent ([sebv](https://github.com/admc))\r\n  - Peter 'Pita' Martischka ([pita](https://github.com/Pita))\r\n  - Jonathan Lipps ([jlipps](https://github.com/jlipps))\r\n  - Phil Sarin ([pdsarin](https://github.com/pdsarin))\r\n  - Mathieu Sabourin ([OniOni](https://github.com/OniOni))\r\n  - Bjorn Tipling ([btipling](https://github.com/btipling))\r\n  - Santiago Suarez Ordonez ([santiycr](https://github.com/santiycr))\r\n  - Bernard Kobos ([bernii](https://github.com/bernii))\r\n  - Jason Carr ([maudineormsby](https://github.com/maudineormsby))\r\n  - Matti Schneider ([MattiSG](https://github.com/MattiSG))\r\n\r\n## License\r\n\r\n  * License - Apache 2: http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n## 0.2.x Release\r\n\r\n### 0.2.0\r\n\r\n- New wrapper: promise chain.\r\n- Old chain api is deprecated (It is still available, but you will see a depreciation message).\r\n- There are some changes in the way the element and webdriver classes are passed around\r\nwhich may affect external wrappers. External wrappers should now subclass those 2 classes. \r\n\r\n### 0.2.1\r\n \r\n- New test suite using the promise chain api.\r\n- `browser.Q` was moved to `wd.Q`.\r\n\r\n### 0.2.2 \r\n\r\n- chai-as-promised v4 compatible.\r\n- Promise wrappers can now be monkey patched directly.\r\n- New saucelabs helpers.\r\n\r\nIncompatibilities: \r\n\r\n  - There is a new method to call, `wd.rewrap()`, to propagate async monkey \r\n  patching to promise. (see [here](https://github.com/admc/wd/blob/master/examples/promise/monkey.patch-with-async.js#L35) and the monkey patch section below)\r\n  - The chai-as-promised setup has changed in V4, look out for the `transferPromiseness` \r\n  line in the examples. (see [here](https://github.com/admc/wd/blob/master/examples/promise/chrome.js#L15))\r\n\r\n## Usage\r\n\r\n### Q promises + chaining\r\n\r\n```js\r\n...\r\n\r\nbrowser\r\n  .init({browserName:'chrome'})\r\n  .get(\"http://admc.io/wd/test-pages/guinea-pig.html\")\r\n  .title()\r\n    .should.become('WD Tests')\r\n  .elementById('i am a link')\r\n  .click()\r\n  .eval(\"window.location.href\")\r\n    .should.eventually.include('guinea-pig2')\r\n  .back()\r\n  .elementByCss('#comments').type('Bonjour!')\r\n  .getValue().should.become('Bonjour!')\r\n  .fin(function() { return browser.quit(); })\r\n  .done();\r\n```\r\n[full code here](https://github.com/admc/wd/blob/master/examples/promise/chrome.js)\r\n\r\n\r\n### Pure async\r\n\r\n```js\r\n...\r\n\r\nbrowser.init({browserName:'chrome'}, function() {\r\n  browser.get(\"http://admc.io/wd/test-pages/guinea-pig.html\", function() {\r\n    browser.title(function(err, title) {\r\n      title.should.include('WD');\r\n      browser.elementById('i am a link', function(err, el) {\r\n        browser.clickElement(el, function() {\r\n          /* jshint evil: true */\r\n          browser.eval(\"window.location.href\", function(err, href) {\r\n            href.should.include('guinea-pig2');\r\n            browser.quit();\r\n          });\r\n        });\r\n      });\r\n    });\r\n  });\r\n});\r\n```\r\n[full code here](https://github.com/admc/wd/blob/master/examples/async/chrome.js)\r\n\r\n\r\n### Q promises without chaining\r\n\r\nSee example [here](https://github.com/admc/wd/blob/master/examples/promise/no-chain.js).\r\n\r\n## Generators Api\r\n\r\n### Yiewd\r\n\r\n[Yiewd](https://github.com/jlipps/yiewd) is a wrapper around Wd.js that uses\r\ngenerators in order to avoid nested callbacks, like so:\r\n\r\n```js\r\nwd.remote(function*() {\r\n  yield this.init(desiredCaps);\r\n  yield this.get(\"http://mysite.com\");\r\n  el = yield this.elementById(\"someId\");\r\n  yield el.click();\r\n  el2 = yield this.elementById(\"anotherThing\")\r\n  text = yield el2.text();\r\n  text.should.equal(\"What the text should be\");\r\n  yield this.quit();\r\n});\r\n```\r\n## Mocha integration\r\n\r\n```js\r\n...\r\n\r\ndescribe(\"using mocha-as-promised and chai-as-promised\", function() {\r\n  var browser;\r\n\r\n  before(function() {\r\n    browser = wd.promiseChainRemote();\r\n    ...\r\n\r\n    return browser.init({browserName:'chrome'});\r\n  });\r\n\r\n  beforeEach(function() {\r\n    return browser.get(\"http://admc.io/wd/test-pages/guinea-pig.html\");\r\n  });\r\n\r\n  after(function() {\r\n    return browser.quit();\r\n  });\r\n\r\n  it(\"should retrieve the page title\", function() {\r\n    return browser.title().should.become(\"WD Tests\");\r\n  });\r\n\r\n  it(\"submit element should be clicked\", function() {\r\n    return browser.elementById(\"submit\").click().eval(\"window.location.href\")\r\n      .should.eventually.include(\"&submit\");\r\n  });\r\n});\r\n```\r\n\r\n[example here](https://github.com/admc/wd/blob/master/examples/promise/mocha-specs.js)\r\n\r\n\r\n## Repl\r\n\r\n```\r\n./node_modules/.bin/wd shell\r\n```\r\n\r\n```\r\n): wd shell\r\n> x = wd.remote() or wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\")\r\n\r\n> x.init() or x.init({desired capabilities override})\r\n> x.get(\"http://www.url.com\")\r\n> x.eval(\"window.location.href\", function(e, o) { console.log(o) })\r\n> x.quit()\r\n```\r\n\r\n## Doc\r\n\r\n### Api\r\n\r\n[supported](https://github.com/admc/wd/blob/master/doc/jsonwire-mapping.md)\r\n\r\n[full json wire mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-full-mapping.md)\r\n\r\n### JsonWireProtocol\r\n\r\nWD is simply implementing the Selenium JsonWireProtocol, for more details see the official docs:\r\n - <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol\">http://code.google.com/p/selenium/wiki/JsonWireProtocol</a>\r\n\r\n### Browser initialization\r\n\r\n#### Indexed parameters\r\n\r\n```js\r\nvar browser = wd.remote();\r\n// or\r\nvar browser = wd.remote('localhost');\r\n// or\r\nvar browser = wd.remote('localhost', 8888);\r\n// or\r\nvar browser = wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\");\r\n```\r\n#### Named parameters\r\n\r\nThe parameters used are similar to those in the [url](http://nodejs.org/docs/latest/api/url.html) module.\r\n\r\n```js\r\nvar browser = wd.remote()\r\n// or\r\nvar browser = wd.remote({\r\n  hostname: '127.0.0.1',\r\n  port: 4444,\r\n  user: 'username',\r\n  pwd: 'password',\r\n});\r\n// or\r\nvar browser = wd.remote({\r\n  hostname: '127.0.0.1',\r\n  port: 4444,\r\n  auth: 'username:password',\r\n});\r\n```\r\n\r\nThe following parameters may also be used (as in earlier versions):\r\n\r\n```js\r\nvar browser = wd.remote({\r\n  host: '127.0.0.1',\r\n  port: 4444,\r\n  username: 'username',\r\n  accessKey: 'password',\r\n});\r\n```\r\n#### Url string\r\n\r\n```js\r\nvar browser = wd.remote('http://localhost:4444/wd/hub');\r\n// or\r\nvar browser = wd.remote('http://user:apiKey@ondemand.saucelabs.com/wd/hub');\r\n```\r\n\r\n#### Url object created via `url.parse`\r\n\r\n[URL module documentation](http://nodejs.org/docs/v0.10.0/api/url.html#url_url)\r\n\r\n```js\r\nvar url = require('url');\r\nvar browser = wd.remote(url.parse('http://localhost:4444/wd/hub'));\r\n// or\r\nvar browser = wd.remote(url.parse('http://user:apiKey@ondemand.saucelabs.com:80/wd/hub'));\r\n```\r\n\r\n#### Defaults\r\n\r\n```js\r\n{\r\n    protocol: 'http:'\r\n    hostname: '127.0.0.1',\r\n    port: '4444'\r\n    path: '/wd/hub'\r\n}\r\n```\r\n\r\n### Element function chaining (using promise chains)\r\n\r\nWith the promise chain api the method from the `browser` prototype and the \r\n`element` prototype are all available within the `browser` instance, so it might\r\nbe confusing at first. However we tried to keep the logic as simple as possible \r\nusing the principles below: \r\n\r\n- There is no state passed between calls, except for what the method returns.\r\n- If the method returns an element the element scope is propagated.\r\n- If the method returns nothing (click, type etc...) we make the method return the current element, so the element scope is propagated.\r\n- If the method returns something (text, getAttribute...), the element scope is lost.\r\n- You may use \"<\" as the first parameter to get out of the element scope.\r\n- You may use \">\" as the first parameter to force the call to be done within the current context (mainly used to retrieve subelements).\r\n\r\nIf you need to do something more complicated, like reusing an element for 2 calls, then \r\ncan either Q promise functionnality (like then, Q.all or Q sequences), or retrieve your\r\nelement twice (since the promise chain api is very terse, this is usually acceptable).\r\n\r\nElement function chaining example [here](https://github.com/admc/wd/blob/master/examples/promise/chained-el-func-call.js)\r\n\r\n### Monkey patching\r\n\r\nYou may want to monkey patch the webdriver class in order to add custom functionalities.\r\nPlease refer to the following examples:\r\n\r\n- [pure promise](https://github.com/admc/wd/blob/master/examples/promise/monkey.patch.js).\r\n- [async patch used by promise](https://github.com/admc/wd/blob/master/examples/promise/monkey.patch-with-async.js).\r\n- [promise no-chain](https://github.com/admc/wd/blob/master/examples/promise/monkey.patch-no-chain.js).\r\n- [full async](https://github.com/admc/wd/blob/master/examples/async/monkey.patch.js).\r\n\r\nCaveat: You now need to call `wd.rewrap()` to propagate async monkey patching to the \r\npromise wrapper. This will ovewrite the promise wrapper prototype, so you need to do \r\nyour monkey patching in order, async first, call `wd.rewrap()` , and only then promise.\r\n\r\n### Promise helpers\r\n\r\nThis is a clean alternative to monkey patching.\r\nSee example [here](https://github.com/admc/wd/blob/master/examples/promise/helper.js).\r\n\r\n### Environment variables for Saucelabs\r\n\r\nWhen connecting to Saucelabs, the `user` and `pwd` fields can also be set through the `SAUCE_USERNAME` and `SAUCE_ACCESS_KEY` environment variables.\r\n\r\nThe following helper are also available to update sauce jobs: `sauceJobUpdate` and `sauceJobStatus`.\r\n\r\n### Safe Methods\r\n\r\nThe `safeExecute` and `safeEval` methods are equivalent to `execute` and `eval` but the code is\r\nexecuted within a `eval` block. They are safe in the sense that eventual\r\ncode syntax issues are tackled earlier returning as syntax error and\r\navoiding browser hanging in some cases.\r\n\r\nAn example below of expression hanging Chrome:\r\n\r\n```js\r\nbrowser.eval(\"wrong!!!\", function(err, res) { // hangs\r\nbrowser.safeEval(\"wrong!!!\", function(err, res) { // returns\r\nbrowser.execute(\"wrong!!!\", function(err, res) { //hangs\r\nbrowser.safeExecute(\"wrong!!!\", function(err, res) { //returns\r\n```\r\n\r\n## Run the tests!\r\n\r\n```\r\n# Install the Selenium server, Chromedriver connect\r\nnode_modules/.bin/install_selenium\r\nnode_modules/.bin/install_chromedriver\r\n\r\n#Run the selenium server with chromedriver:\r\nnode_modules/.bin/start_selenium_with_chromedriver\r\n\r\ncd wd\r\nnpm install\r\nmake test\r\n\r\n# look at the results!\r\n```\r\n\r\n## Run the tests on Sauce Labs cloud!\r\n\r\n```\r\n# Install Sauce Connect\r\nnode_modules/.bin/install_sauce_connect\r\n\r\n# Set the following env variales: SAUCE_USERNAME and SAUCE_ACCESS_KEY \r\n\r\n# Start Sauce Sonnect:\r\nnode_modules/.bin/start_sauce_connect\r\n\r\ncd wd\r\nnpm install\r\nmake test_e2e_sauce # may be run without sauce connect\r\nmake test_midway_sauce_connect\r\n\r\n# look at the results on Saucelabs site!\r\n```\r\n\r\n## Adding new method / Contributing\r\n\r\nIf the method you want to use is not yet implemented, that should be\r\neasy to add it to `lib/webdriver.js`. You can use the `doubleclick`\r\nmethod as a template for methods not returning data, and `getOrientation`\r\nfor methods which returns data. No need to modify README as the doc\r\ngeneration is automated. Other contributions are welcomed.\r\n\r\n## Generating doc\r\n\r\nThe JsonWire mappings in the README and mapping files are generated from code\r\ncomments using [dox](https://github.com/visionmedia/dox).\r\n\r\nTo update the mappings run the following commands:\r\n\r\n```\r\nmake mapping > doc/jsonwire-mapping.md\r\nmake full_mapping > doc/jsonwire-full-mapping.md\r\nmake unsupported_mapping > doc/jsonwire-unsupported-mapping.md\r\n```\r\n\r\n## Publishing\r\n\r\n```\r\nnpm version [patch|minor|major]\r\ngit push --tags\r\nnpm publish\r\n```\r\n\r\n## Test Coverage\r\n\r\n[test coverage](http://admc.io/wd/istanbul/coverage/lcov-report/index.html)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}
