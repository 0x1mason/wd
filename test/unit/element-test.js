// Generated by CoffeeScript 1.3.3
(function() {
  var Express, leakDetector, should, test, wd;

  should = require('should');

  Express = require('./express').Express;

  leakDetector = (require('../common/leak-detector'))();

  wd = require('../../lib/main');

  test = function(browserName) {
    var browser;
    browser = null;
    describe("wd.remote", function() {
      return it("should create browser", function(done) {
        browser = wd.remote({});
        browser.on("status", function(info) {
          return console.log("\u001b[36m%s\u001b[0m", info);
        });
        browser.on("command", function(meth, path) {
          return console.log(" > \u001b[33m%s\u001b[0m: %s", meth, path);
        });
        return done(null);
      });
    });
    describe("init", function() {
      return it("should initialize browserinit", function(done) {
        this.timeout(15000);
        return browser.init({
          browserName: browserName
        }, function(err) {
          should.not.exist(err);
          return done(null);
        });
      });
    });
    describe("get", function() {
      return it("should navigate to test page", function(done) {
        this.timeout(10000);
        return browser.get("http://127.0.0.1:8181/element-test-page.html", function(err) {
          should.not.exist(err);
          return done(null);
        });
      });
    });
    describe("element.text", function() {
      return it("should retrieve the text", function(done) {
        return browser.element("id", "text", function(err, el) {
          should.not.exist(err);
          el.should.have.property("text");
          return el.text(function(err, res) {
            res.should.include("I am some text");
            return done(null);
          });
        });
      });
    });
    describe("element.textPresent", function() {
      return it("should check if text is present", function(done) {
        return browser.element("id", "text", function(err, el) {
          should.not.exist(err);
          el.should.have.property("textPresent");
          return el.textPresent("some text", function(err, present) {
            should.not.exist(err);
            present.should.be["true"];
            return done(null);
          });
        });
      });
    });
    describe("element.getAttribute", function() {
      return it("should retrieve attribute value", function(done) {
        return browser.element("id", "getAttribute", function(err, el) {
          should.not.exist(err);
          el.should.have.property("getAttribute");
          return el.getAttribute("att", function(err, value) {
            should.not.exist(err);
            value.should.equal("42");
            return done(null);
          });
        });
      });
    });
    describe("element.getValue", function() {
      return it("should retrieve value", function(done) {
        return browser.element("id", "getValue", function(err, el) {
          should.not.exist(err);
          el.should.have.property("getValue");
          return el.getValue(function(err, value) {
            should.not.exist(err);
            value.should.equal("value");
            return done(null);
          });
        });
      });
    });
    describe("element.sendKeys", function() {
      return it("should send keys", function(done) {
        var text;
        text = "keys";
        return browser.element("id", "sendKeys", function(err, el) {
          should.not.exist(err);
          el.should.have.property("sendKeys");
          return el.sendKeys(text, function(err) {
            should.not.exist(err);
            return el.getValue(function(err, textReceived) {
              should.not.exist(err);
              textReceived.should.equal(text);
              return done(null);
            });
          });
        });
      });
    });
    describe("element.clear", function() {
      return it("should clear input field", function(done) {
        return browser.element("id", "clear", function(err, el) {
          should.not.exist(err);
          el.should.have.property("clear");
          return el.clear(function(err) {
            should.not.exist(err);
            return el.getValue(function(err, textReceived) {
              should.not.exist(err);
              textReceived.should.equal("");
              return done(null);
            });
          });
        });
      });
    });
    describe("close", function() {
      return it("should close current window", function(done) {
        return browser.close(function(err) {
          should.not.exist(err);
          return done(null);
        });
      });
    });
    return describe("quit", function() {
      return it("should destroy browser", function(done) {
        return browser.quit(function(err) {
          should.not.exist(err);
          return done(null);
        });
      });
    });
  };

  describe("wd", function() {
    return describe("unit", function() {
      return describe("element method tests", function() {
        var express;
        express = new Express;
        before(function(done) {
          express.start();
          return done(null);
        });
        after(function(done) {
          express.stop();
          return done(null);
        });
        describe("using chrome", function() {
          return test('chrome');
        });
        describe("using firefox", function() {
          return test('firefox');
        });
        return leakDetector.lookForLeaks();
      });
    });
  });

}).call(this);
