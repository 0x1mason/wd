// Generated by CoffeeScript 1.3.3
(function() {
  var Express, leakDetector, should, test, wd;

  should = require('should');

  Express = require('./express').Express;

  leakDetector = (require('../common/leak-detector'))();

  wd = require('../common/wd-with-cov');

  test = function(browserName) {
    var browser, handles;
    browser = null;
    handles = {};
    describe("wd.remote", function() {
      return it("should create browser", function(done) {
        browser = wd.remote({});
        if (process.env.WD_COV == null) {
          browser.on("status", function(info) {
            return console.log("\u001b[36m%s\u001b[0m", info);
          });
          browser.on("command", function(meth, path) {
            return console.log(" > \u001b[33m%s\u001b[0m: %s", meth, path);
          });
        }
        return done(null);
      });
    });
    describe("init", function() {
      return it("should initialize browserinit", function(done) {
        this.timeout(15000);
        return browser.init({
          browserName: browserName
        }, function(err) {
          should.not.exist(err);
          return done(null);
        });
      });
    });
    describe("opening first window", function() {
      return it("should open the first window", function(done) {
        this.timeout(10000);
        return browser.get("http://127.0.0.1:8181/window-test-page.html?window_num=1", function(err) {
          should.not.exist(err);
          return done(null);
        });
      });
    });
    describe("setting first window name", function() {
      return it("should set the window name", function(done) {
        return browser.execute("window.name='window-1'", function(err) {
          should.not.exist(err);
          return done(null);
        });
      });
    });
    describe("retrieving first window name", function() {
      return it("should be window-1", function(done) {
        return browser.windowName(function(err, name) {
          should.not.exist(err);
          name.should.equal('window-1');
          return done(null);
        });
      });
    });
    describe("retrieving first window handle", function() {
      return it("should retrieve handle", function(done) {
        return browser.windowHandle(function(err, handle) {
          should.not.exist(err);
          should.exist(handle);
          handle.length.should.be.above(0);
          handles['window-1'] = handle;
          return done(null);
        });
      });
    });
    describe("opening second window", function() {
      return it("should open the second window", function(done) {
        this.timeout(10000);
        return browser.execute("window.open('http://127.0.0.1:8181/window-test-page.html?window_num=2','window-2')", function(err) {
          should.not.exist(err);
          return done(null);
        });
      });
    });
    describe("change focus to second window", function() {
      return it("should focus on second window", function(done) {
        return browser.window('window-2', function(err) {
          should.not.exist(err);
          return browser.windowName(function(err, name) {
            should.not.exist(err);
            name.should.equal('window-2');
            return done(null);
          });
        });
      });
    });
    describe("retrieving second window handle", function() {
      return it("should retrieve handle", function(done) {
        return browser.windowHandle(function(err, handle) {
          should.not.exist(err);
          should.exist(handle);
          handle.length.should.be.above(0);
          handle.should.not.equal(handles['window-1']);
          handles['window-2'] = handle;
          return done(null);
        });
      });
    });
    describe("opening third window", function() {
      return it("should open the third window", function(done) {
        this.timeout(10000);
        return browser.execute("window.open('http://127.0.0.1:8181/window-test-page.html?window_num=3','window-3')", function(err) {
          should.not.exist(err);
          return done(null);
        });
      });
    });
    describe("change focus to third window", function() {
      return it("should focus on third window", function(done) {
        return browser.window('window-3', function(err) {
          should.not.exist(err);
          return browser.windowName(function(err, name) {
            should.not.exist(err);
            name.should.equal('window-3');
            return done(null);
          });
        });
      });
    });
    describe("retrieving third window handle", function() {
      return it("should retrieve handle", function(done) {
        return browser.windowHandle(function(err, handle) {
          should.not.exist(err);
          should.exist(handle);
          handle.length.should.be.above(0);
          handle.should.not.equal(handles['window-1']);
          handle.should.not.equal(handles['window-2']);
          handles['window-3'] = handle;
          return done(null);
        });
      });
    });
    describe("windowHandles", function() {
      return it("should retrieve 2 window handles", function(done) {
        return browser.windowHandles(function(err, _handles) {
          var k, v, _i, _len;
          should.not.exist(err);
          _handles.should.have.length(3);
          for (v = _i = 0, _len = handles.length; _i < _len; v = ++_i) {
            k = handles[v];
            _handles.should.include(v);
          }
          return done(null);
        });
      });
    });
    describe("change focus to second window using window handle", function() {
      return it("should focus on second window", function(done) {
        return browser.window(handles['window-2'], function(err) {
          should.not.exist(err);
          return browser.windowName(function(err, name) {
            should.not.exist(err);
            name.should.equal('window-2');
            return done(null);
          });
        });
      });
    });
    describe("closing second window", function() {
      return it("should close the second window", function(done) {
        return browser.close(function(err) {
          should.not.exist(err);
          return browser.windowHandles(function(err, _handles) {
            should.not.exist(err);
            _handles.should.have.length(2);
            return done(null);
          });
        });
      });
    });
    describe("change focus to third window", function() {
      return it("should focus on third window", function(done) {
        return browser.window('window-3', function(err) {
          should.not.exist(err);
          return browser.windowName(function(err, name) {
            should.not.exist(err);
            name.should.equal('window-3');
            return done(null);
          });
        });
      });
    });
    describe("closing third window", function() {
      return it("should close the third window", function(done) {
        return browser.close(function(err) {
          should.not.exist(err);
          return browser.windowHandles(function(err, _handles) {
            should.not.exist(err);
            _handles.should.have.length(1);
            return done(null);
          });
        });
      });
    });
    describe("change focus to first window", function() {
      return it("should focus on first window", function(done) {
        return browser.window('window-1', function(err) {
          should.not.exist(err);
          return browser.windowName(function(err, name) {
            should.not.exist(err);
            name.should.equal('window-1');
            return done(null);
          });
        });
      });
    });
    return describe("quit", function() {
      return it("should destroy browser", function(done) {
        return browser.quit(function(err) {
          should.not.exist(err);
          return done(null);
        });
      });
    });
  };

  describe("wd", function() {
    return describe("unit", function() {
      return describe("element method tests", function() {
        var express;
        express = new Express;
        before(function(done) {
          express.start();
          return done(null);
        });
        after(function(done) {
          express.stop();
          return done(null);
        });
        describe("using chrome", function() {
          return test('chrome');
        });
        describe("using firefox", function() {
          return test('firefox');
        });
        if (process.env.WD_COV == null) {
          return leakDetector.lookForLeaks();
        }
      });
    });
  });

}).call(this);
